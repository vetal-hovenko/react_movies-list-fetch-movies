{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","moviePoster","React","useCallback","imgUrl","className","src","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addNewMovie","existingMovies","useState","searchTitle","setSearchTitle","movieData","setMovieData","movieInfo","setMovieInfo","loading","setLoading","error","setError","formSubmit","event","query","preventDefault","trim","fetch","then","res","json","catch","Response","Error","movieFromAPI","finally","useEffect","newMovie","Title","Plot","Poster","imdbID","onAddMovie","some","prevMovies","onTitleInput","currentTarget","value","onSubmit","htmlFor","onChange","type","id","placeholder","cn","input","disabled","onClick","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a793cbe1.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const moviePoster = React.useCallback(() => {\n    if (movie.imgUrl === 'N/A') {\n      return 'https://via.placeholder.com/360x270.png?text=no%20preview';\n    }\n\n    return movie.imgUrl;\n  }, [movie]);\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={moviePoster()}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useCallback } from 'react';\nimport cn from 'classnames';\n\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\n\nimport { MovieCard } from '../MovieCard/MovieCard';\n\ninterface Props {\n  addNewMovie: React.Dispatch<React.SetStateAction<Movie[]>>;\n  existingMovies: Movie[];\n}\n\nexport const FindMovie: React.FC<Props> = ({ addNewMovie, existingMovies }) => {\n  const [searchTitle, setSearchTitle] = useState<string>('');\n  const [movieData, setMovieData] = useState<MovieData | null | ResponseError>(null);\n  const [movieInfo, setMovieInfo] = useState<Movie | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n\n  const formSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoading(true);\n\n    if (searchTitle.trim() !== '') {\n      getMovie(searchTitle)\n        .then(movieFromAPI => {\n          setMovieData(movieFromAPI);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [searchTitle]);\n\n  useEffect(() => {\n    if (movieData !== null && 'Poster' in movieData) {\n      const newMovie: Movie = {\n        title: movieData.Title,\n        description: movieData.Plot,\n        imgUrl: movieData.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n        imdbId: movieData.imdbID,\n      };\n\n      setMovieInfo(newMovie);\n    } else if (movieData !== null && movieData.Error) {\n      setError(true);\n    }\n  }, [movieData]);\n\n  const onAddMovie = useCallback(() => {\n    if (movieInfo) {\n      const movieExists = existingMovies.some((movie) => movie.imdbId === movieInfo.imdbId);\n\n      if (!movieExists) {\n        addNewMovie((prevMovies: Movie[]) => [...prevMovies, movieInfo]);\n      }\n    }\n\n    setSearchTitle('');\n    setMovieInfo(null);\n  }, [movieInfo]);\n\n  const onTitleInput = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTitle(event.currentTarget.value);\n    setError(false);\n  }, [searchTitle]);\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => formSubmit(event)}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={searchTitle}\n              onChange={event => onTitleInput(event)}\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn({\n                'input is-danger': error,\n                input: !error,\n              })}\n            />\n          </div>\n\n          {error\n          && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', { 'is-loading': loading })}\n              disabled={loading || searchTitle.trim() === ''}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movieInfo\n            && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n      {movieInfo\n        && (\n          <div className=\"container\" data-cy=\"previewContainer\">\n\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard movie={movieInfo} />\n          </div>\n        )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=e4efbf0f';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addNewMovie={setMovies} existingMovies={movies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}